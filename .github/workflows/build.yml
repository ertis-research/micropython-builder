name: Build binaries

on:
  push:
  pull_request:
    paths:
      - '.github/workflows/*.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - mcu: stm32
            board: NUCLEO_L476RG
          - mcu: stm32
            board: STM32L476RG

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set execute permissions for all scripts
        run: find .github/scripts -type f -name "*.sh" -exec chmod +x {} \;

      - name: Cache ARM Toolchain
        id: cache-arm
        uses: actions/cache@v3
        with:
          path: /usr/bin/gcc-arm-none-eabi
          key: arm-toolchain-${{ runner.os }}

      - name: Install ARM Toolchain (if not cached)
        if: steps.cache-arm.outputs.cache-hit != 'true'
        run: sudo apt-get install -y gcc-arm-none-eabi libnewlib-arm-none-eabi

      - name: Initialize MicroPython and dependencies
        run: .github/scripts/init.sh

      - name: Ensure artifacts directory exists
        run: mkdir -p ./artifacts

      - name: Compile for ${{ matrix.mcu }} ${{ matrix.board }}
        run: |
          if [ -n "${{ matrix.board }}" ]; then
            .github/scripts/${{ matrix.mcu }}/${{ matrix.board }}.sh
          else
            .github/scripts/${{ matrix.mcu }}/build.sh
          fi

      - name: Save artifact
        run: |
          ARTIFACT_NAME=${{ matrix.mcu }}
          if [ -n "${{ matrix.board }}" ]; then
            ARTIFACT_NAME=${{ matrix.mcu }}.${{ matrix.board }}
          fi
          mv artifacts/${ARTIFACT_NAME}.dfu artifacts/${ARTIFACT_NAME}.dfu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.mcu }}-${{ matrix.board || 'default' }}
          path: artifacts/${{ matrix.mcu }}*.dfu

  release:
    runs-on: ubuntu-22.04
    needs: build  # Waits for all builds to finish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Git Tag
        run: |
          git fetch --tags
          TAG_NAME=$(date +"%Y%m%d-%H%M%S")
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: artifacts/**/*
          generate_release_notes: true
